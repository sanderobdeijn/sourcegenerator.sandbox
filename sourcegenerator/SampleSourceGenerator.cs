using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace sourcegenerator;

[Generator]
public class SampleSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var europaLoketVerzoeken = context.SyntaxProvider
               .CreateSyntaxProvider(CouldBeRecordsAsync, GetRecordTypeOrNull)
               .Where(type => type is not null)
               .Collect();

        context.RegisterSourceOutput(europaLoketVerzoeken, GenerateCodeEuropaLoketVerzoek);
    }

    private static bool CouldBeRecordsAsync(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        if (syntaxNode is not AttributeSyntax attribute)
            return false;

        var name = ExtractName(attribute.Name);

        var result = name is "EuropaLoketVerzoek" or "EuropaLoketVerzoekAttribute";

        return result;
    }

    private static string? ExtractName(NameSyntax? name)
    {
        return name switch
        {
            SimpleNameSyntax ins => ins.Identifier.Text,
            QualifiedNameSyntax qns => qns.Right.Identifier.Text,
            _ => null
        };
    }

    private static ITypeSymbol? GetRecordTypeOrNull(
GeneratorSyntaxContext context,
CancellationToken cancellationToken)
    {
        var attributeSyntax = (AttributeSyntax)context.Node;

        // "attribute.Parent" is "AttributeListSyntax"
        // "attribute.Parent.Parent" is a C# fragment the attributes are applied to
        if (attributeSyntax.Parent?.Parent is not RecordDeclarationSyntax recordDeclaration)
            return null;

        return context.SemanticModel.GetDeclaredSymbol(recordDeclaration) is not ITypeSymbol type || !IsRecord(type) ? null : type;
    }

    private static bool IsRecord(ISymbol type)
    {
        return type.GetAttributes()
                   .Any(a => a.AttributeClass?.Name == "EuropaLoketVerzoekAttribute" &&
                             a.AttributeClass.ContainingNamespace is
                             {
                                 Name: "DemoLibrary",
                                 ContainingNamespace.IsGlobalNamespace: true
                             });
    }

    private static void GenerateCodeEuropaLoketVerzoek(
 SourceProductionContext context,
 ImmutableArray<ITypeSymbol?> records)
    {
        if (records.IsDefaultOrEmpty)
            return;

        foreach (var type in records)
        {
            if (type != null)
            {
                var code = GenerateCodeEuropaLoketVerzoek(type);
                var typeNamespace = type.ContainingNamespace.IsGlobalNamespace
                       ? null
                       : $"{type.ContainingNamespace}.";

                context.AddSource($"{typeNamespace}{type.Name}.g.cs", code);
            }
        }
    }

    private static string GenerateCodeEuropaLoketVerzoek(ITypeSymbol type)
    {
        var ns = type.ContainingNamespace.IsGlobalNamespace
              ? null
              : type.ContainingNamespace.ToString();
        var name = type.Name;

        return @$"// <auto-generated />

using System.Collections.Generic;

{(ns is null ? null : $@"namespace {ns}
{{")}
   partial record {name}
   {{
      public string Test1 {{ get; set; }}
      public string Test2 {{ get; set; }}
   }}
{(ns is null ? null : @"}
")}";
    }
}